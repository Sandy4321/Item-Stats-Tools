# -*- coding: utf-8 -*-
"""
Created on Sun Sep 27 13:51:58 2020

@author: peter Chungungo app
"""
import webview
from tkinter import *
from tkinter.ttk import *
from tkinter import filedialog, simpledialog, messagebox, scrolledtext
import tkinter as tk
import pandas as pd
import numpy as np
import base64
from io import StringIO
from datetime import date
import webbrowser
import os.path
from os import remove

from tkintertable import TableCanvas as Table
import copy
from splash_chungungo import splash_screen, destroy_splash
import time
import tempfile
import os

splash_screen()

os.environ['PATH'] = 'R/bin/x64' + os.pathsep + os.environ['PATH']
print(os.environ['PATH'])
os.environ['R_HOME'] = 'R/'

# R modules needs environ set-------------------------------------------

import rpy2.robjects as ro
from rpy2.robjects.conversion import localconverter
from rpy2.robjects.packages import importr
from rpy2.robjects import pandas2ri, Formula
from rpy2 import robjects


# variables
version = '1.0 Beta'
buf = StringIO()
test = tempfile.TemporaryFile(mode='w+t')
today = date.today()
# Textual month, day and year
d2 = today.strftime("%B %d, %Y")
# seteo dataframe_original Open dialog --- df_correct Respuestas-dialog
NoneType = type(None)
dataframe_original = 0
menudisabled = "disabled"
filedir = '/'
pd.options.display.html.border = 0

# Start write html
style = '''<style> @font-face {
    font-family: 'cmu_serifroman';
    src: url(data:application/font-woff2;charset=utf-8;base64,) format('woff2'),
         url(data:application/font-woff;charset=utf-8;base64,) format('woff');
    font-weight: normal;font-style: normal;}
    body {font-family: "cmu_serifroman", sans-serif;} h1{ font-size: 1.5em;} h2{font-size: 1em;font-weight: normal;} 
    h3{font-size: 0.8em; font-weight: normal;} table{margin: 0 auto; border-left: none;border-right: none;border-top: 2px solid black;
    border-bottom:2px solid black; font-size: small; border-collapse: collapse;} thead{
    border-top: none;border-bottom: 2px solid black;} tbody{border-bottom: none;
    border-top: none;} td, th{padding-left: 15px;padding-right: 15px;} </style>'''

test.write(style + '<h1> Análisis de Psicométrico </h1>' + '<br>'+ d2)


# -----------------------------------------------------------------------------------------------------------------
# FUNCTIONS
def open_web():
    with open('preview.html', 'w') as f:
        test.seek(0)
        for x in test.readlines():
            f.write(x)
        f.close()
    webview.create_window('Reporte', 'preview.html')
    webview.start(gui='mshtml')
    return


# Abrir archivo
def open_datatable():
    global dataframe_table
    app.exportTable()
    dataframe_table = pd.read_csv('tempCSV', encoding="Latin-1", dtype=str)
    if os.path.exists('tempCSV'):
        remove('tempCSV')
    return


def open_file():
    if type(dataframe_original) == int:
        open_file2()
    else:
        remplace = messagebox.askyesno(message="Desea abrir otro archivo", title="Mensaje")
        if remplace:
            test.seek(0)
            test.truncate()
            test.write('<style>'
                       + 'body{font-family: \'Trebuchet MS\', Arial, Helvetica, sans-serif;'
                       + '  border-collapse: collapse;' + '  width: 100%;' + '}'
                       + 'h1 {font-family: \'Trebuchet MS\', Arial, Helvetica, sans-serif;}'
                       + ' td,  th {' + '  border: 1px solid #ddd;' + '  padding: 8px;' + '}'
                       + ' tr:nth-child(even){background-color: #f2f2f2;}' + ' tr:hover {background-color: #ddd;}'
                       + ' th {' + '  padding-top: 12px;' + '  padding-bottom: 12px;' + '  text-align: left;'
                       + '  background-color: #4CAF50;' + '  color: white;' + '}'
                       + '</style>' + d2 + '<br>' + '<h1>Analisis de Excel Google Forms</h1>' + '<br>')
            open_file2()
    return


def open_file2():
    global filedir
    filename_excel = filedialog.askopenfilename(initialdir=filedir, title="Abrir Archivo",
                                                filetypes=(("excel files", "*.xls"), ("excel files", "*.xlsx")))
    filedir = os.path.dirname(filename_excel)
    if filename_excel:
        global dataframe_original
        dataframe_original = pd.read_excel(filename_excel, dtype=str, index_col=[0])
        print(dataframe_original)
        # copy Excel  #fix missing data
        dataframe_original = dataframe_original.replace(np.nan, "NaN")
        buffer = dataframe_original.to_dict('index')
        # Global app permite que la tabla actualice la data correctamente
        global app
        app = MyTable(frame, data=buffer)
        app.redrawTable()
        # Activa menu
        global menudisabled
        menudisabled = "normal"
        # menubar.entryconfig("Edit", state= menudisabled)
        menubar.entryconfig("Análisis", state=menudisabled)
        root.title('Chungungo' + ' - ' + os.path.basename(filename_excel))
    return


# Guardar tabla
def save_excel():
    report_file = filedialog.asksaveasfilename(initialdir=filedir, title="Guardar excel",
                                               filetypes=[("Archivo excel", "*.xlsx")], defaultextension='.xlsx')
    if report_file:
        open_datatable()
        dataframe_table.to_excel(report_file, index=False, header=False)
    return


# Guardar reporte
def save_html():
    report_file = filedialog.asksaveasfilename(initialdir=filedir, title="Guardar Reporte",
                                               filetypes=[("Archivo html", "*.html")], defaultextension='.html')
    if report_file:
        with open(report_file, 'w') as f:
            test.seek(0)
            for x in test.readlines():
                f.write(x)
                print(test.read())
            f.close()
        webbrowser.open_new_tab(report_file)
    return


# Plots frecuency for item----------------------------------------------------------------------------------------
def dificultad_tct():
    def disablebutton():
        i = 0
        for row in range(len(vars)):
            if vars[row][0].get() == 1:
                i = i + 1
                if i >= 4:
                    apply_button.configure(state=NORMAL)
                else:
                    apply_button.configure(state='disabled')
        return

    def difficult_function():
        column_selected = []
        for i in range(len(vars)):
            if vars[i][0].get() == 1:
                column_selected.append(vars[i][1])
        dataframe_diff = dataframe_table[column_selected].applymap(int)

        writer = robjects.r['write.csv']
        with localconverter(ro.default_converter + pandas2ri.converter):
            scores = ro.conversion.py2rpy(dataframe_diff)
        print(scores)
        data = ro.r('data.matrix')
        item_analysis = importr('ShinyItemAnalysis')
        as_null = ro.r['as.null']
        table = item_analysis.ItemAnalysis(data(scores), y=as_null(), k=4, l=1, u=4, add_bin=FALSE)
        writer(table, 'filetempo')
        df_diff = pd.read_csv('filetempo')
        df_diff.rename(columns={'Unnamed: 0': 'Item', 'avgScore': 'Dificultad', 'SD': 'Desv. por Item',
                                'ULI': 'Indice de Discr.', 'RIR': 'Coef. Discr.'}, inplace=True)
        print(df_diff[['Item', 'Dificultad', 'Desv. por Item', 'Indice de Discr.', 'Coef. Discr.']])
        buf.truncate(0)
        df_diff[['Item', 'Dificultad', 'Desv. por Item', 'Indice de Discr.', 'Coef. Discr.']].to_html(buf, index=False)
        text = buf.getvalue()
        test.write('<hr>' + '<br><h2>Dificultad y Discriminación<h2>' + text + '<hr>')
        messagebox.showinfo(master=difficult_window, message="Diff y Disc Listo", title="Mensaje")
        open_web()
        return

    open_datatable()
    difficult_window = tk.Toplevel()
    ClassToplevel(difficult_window)
    difficult_window.geometry('500x280')
    difficult_window.title('Dificultad y Discriminación')
    apply_button = tk.Button(difficult_window, text="Aplicar", command=difficult_function, state='disabled')
    tk.Label(difficult_window, text='Dificultad, indice de Discriminación \n y coef. Discriminación',
             font='Arial 11 bold').grid(row=0, column=1, columnspan=4)
    info_label = tk.Label(difficult_window, wraplength=270, justify=LEFT,
                          text='Grado de dificultad por item, indice de discriminación y coeficiente de discriminación')
    info_label.grid(row=1, column=1, columnspan=4, rowspan=3)
    apply_button.grid(row=6, column=8, sticky=W)
    checklist = scrolledtext.ScrolledText(difficult_window, height=10, width=20, cursor='arrow', background='white')
    checklist.grid(row=0, column=8, rowspan=4)
    vars = []
    for column in dataframe_table:
        var = tk.IntVar()
        vars.append([var, column])
        checkbutton = tk.Checkbutton(checklist, text=column, variable=var, command=disablebutton, background='white')
        checklist.window_create("end", window=checkbutton)
        checklist.insert("end", "\n")
    checklist.configure(state="disabled")
    difficult_window.mainloop()
    return


# Funciones de analisis------------------------------------------------------------------
def irt_rasch():
    def disablebutton():
        i = 0
        for row in range(len(vars)):
            if vars[row][0].get() == 1:
                i = i + 1
                if i >= 3:
                    apply_button.configure(state=NORMAL)
                else:
                    apply_button.configure(state='disabled')
        return

    def rasch_function():
        analysis_rasch_window.config(cursor='wait')
        column_selected = []
        for i in range(len(vars)):
            if vars[i][0].get() == 1:
                column_selected.append(vars[i][1])
        dataframe_rasch = dataframe_table[column_selected].copy()
        ltm = importr('ltm')
        sia = importr('ShinyItemAnalysis')
        writer = robjects.r['write.csv']
        grdevices = importr('grDevices')
        with localconverter(ro.default_converter + pandas2ri.converter):
            scores = ro.conversion.py2rpy(dataframe_rasch)
        model = ltm.rasch(scores, IRT_param=True)
        coef = robjects.r['coef']
        plot = robjects.r['plot']
        coeff = coef(model, prob=True, order=False)
        grdevices.png('file.png', width=512, height=512)
        plot(model, type='ICC')
        grdevices.dev_off()
        encoded = base64.b64encode(open("file.png", "rb").read()).decode('utf-8')

        fscores = ltm.factor_scores(model, resp_patterns=scores)
        theta = fscores[0].rx(True, 'z1')
        b = coeff.rx(True, 'Dffclt')
        print(theta, b)
        wright = sia.ggWrightMap(theta, b)
        grdevices.png('file2.png', width=512, height=512)
        print(wright)
        grdevices.dev_off()
        encoded2 = base64.b64encode(open("file2.png", "rb").read()).decode('utf-8')
        godfit = ltm.GoF_rasch(model)
        p_value = np.array(godfit.rx2('p.value'))
        print(p_value[0])
        list_gof = {'p valor-Bondad de ajuste modelo': [p_value[0]]}
        df_gof = pd.DataFrame(list_gof, columns=['p valor-Bondad de ajuste modelo'])
        writer(coeff, 'filetempo')
        df_rasch = pd.read_csv('filetempo')
        print(df_rasch)
        df_rasch.rename(columns={'Unnamed: 0': 'Item'}, inplace=True)
        buf.truncate(0)
        df_rasch.to_html(buf,index=False)
        text = buf.getvalue()
        test.write('<hr>' + '<br><h2>ITR-RASCH<h2>' + text)
        test.write('<img src=\'data:image/png;base64,{}\'>'.format(encoded))
        test.write('<img src=\'data:image/png;base64,{}\'>'.format(encoded2))
        remove('file.png')
        remove('file2.png')
        remove('filetempo')
        buf.truncate(0)
        df_gof.to_html(buf,index=False)
        text = buf.getvalue()
        test.write(text + '<hr>')
        analysis_rasch_window.config(cursor='')
        messagebox.showinfo(master=analysis_rasch_window, message="Rasch Listo", title="Mensaje")
        open_web()
        return

    def irt_function():
        analysis_rasch_window.config(cursor='wait')
        column_selected = []
        for i in range(len(vars)):
            if vars[i][0].get() == 1:
                column_selected.append(vars[i][1])
        dataframe_rasch = dataframe_table[column_selected].copy()
        ltm = importr('ltm')
        writer = robjects.r['write.csv']
        grdevices = importr('grDevices')
        with localconverter(ro.default_converter + pandas2ri.converter):
            scores = ro.conversion.py2rpy(dataframe_rasch)
        print(scores)
        fmla = Formula('scores ~ z1')
        env = fmla.environment
        env['scores'] = scores
        model = ltm.ltm(fmla, IRT_param=True)
        coef = robjects.r['coef']
        plot_ltm = robjects.r['plot']
        grdevices.png('file.png', width=512, height=512)
        plot_ltm(model, type='ICC')
        grdevices.dev_off()
        encoded = base64.b64encode(open("file.png", "rb").read()).decode('utf-8')
        coeff = coef(model, prob=True, order=False)
        writer(coeff, 'filetempo')
        df_irt = pd.read_csv('filetempo')
        print(df_irt)
        df_irt.rename(columns={'Unnamed: 0': 'Item'}, inplace=True)
        buf.truncate(0)
        df_irt.to_html(buf, index=False)
        text = buf.getvalue()
        test.write('<hr>' + '<br><h2>ITR-2PL<h2>' + text)
        test.write('<img src=\'data:image/png;base64,{}\'>'.format(encoded) + '<hr>')
        remove('file.png')
        remove('filetempo')
        analysis_rasch_window.config(cursor='')
        messagebox.showinfo(message="IRT-2PL Listo", title="Mensaje")
        open_web()
        return

    open_datatable()
    analysis_rasch_window = tk.Toplevel()
    ClassToplevel(analysis_rasch_window)
    analysis_rasch_window.geometry('550x300')
    analysis_rasch_window.title('Análisis IRT')
    apply_button = tk.Button(analysis_rasch_window, state='disabled', text="Aplicar",
                             command=lambda: irt_function() if check_pl.get() else rasch_function())
    tk.Label(analysis_rasch_window, text='Análisis Teoria Respuesta al Item', font='Arial 11 bold').grid(row=0,
                                                                                                         column=1,
                                                                                                         columnspan=4)
    info_label = tk.Label(analysis_rasch_window, wraplength=270, justify=LEFT,
                          text='Test IRT modelo Rasch de 1 - 2PL, al aplicar este test obtienes parámetro'
                               ' Dificultad por item y en el caso de 2PL Discriminación, además de la probabilidad de '
                               'responder correctamente dado Rasgo latente equilibrado. Se adjunta curva '
                               'característica de item y mapa persona item.\n \n Seleccione entre 2PL y '
                               'un 1PL')
    info_label.grid(row=1, column=1, columnspan=4, rowspan=3)
    apply_button.grid(row=6, column=8, sticky=W)
    checklist = scrolledtext.ScrolledText(analysis_rasch_window, height=10, width=20, cursor='arrow',
                                          background='white')
    checklist.grid(row=0, column=8, rowspan=4)
    vars = []
    for column in dataframe_table:
        var = tk.IntVar()
        vars.append([var, column])
        checkbutton = tk.Checkbutton(checklist, text=column, variable=var, command=disablebutton, background='white')
        checklist.window_create("end", window=checkbutton)
        checklist.insert("end", "\n")
    check_pl = tk.IntVar()
    checkbutton_pl = tk.Checkbutton(analysis_rasch_window, text='IRT-2PL (por defecto 1PL)', variable=check_pl)
    checkbutton_pl.grid(row=6, column=1, columnspan=4, sticky=W)
    checklist.configure(state="disabled")
    analysis_rasch_window.mainloop()
    return


# Alpha Cronbach
def alpha_cronbach():
    def disablebutton():
        for row in range(len(vars)):
            if vars[row][0].get() == 1:
                apply_button.configure(state=NORMAL)
                return
            else:
                apply_button.configure(state='disabled')
        return

    def function_alpha():
        column_selected = []
        for i in range(len(vars)):
            if vars[i][0].get() == 1:
                column_selected.append(vars[i][1])
        dataframe_alpha = dataframe_table[column_selected].copy()
        with localconverter(ro.default_converter + pandas2ri.converter):
            scores = ro.conversion.py2rpy(dataframe_alpha)
        ltm = importr('ltm')
        sapply = ro.r('sapply')
        data = ro.r('as.matrix')
        as_numeric = ro.r('as.numeric')
        writer = robjects.r['write.csv']
        datito = sapply(scores, as_numeric)
        print('convertido a matrix', data(datito))
        item_analysis = importr('ShinyItemAnalysis')
        as_null = ro.r['as.null']
        table = item_analysis.ItemAnalysis(data(datito), y=as_null(), k=4, l=1, u=4, add_bin=FALSE)
        print(table)
        alpha_table = ltm.cronbach_alpha(scores)
        print(alpha_table)
        alpha = np.array(alpha_table.rx2('alpha'))
        items = alpha_table.rx2('p')
        n = alpha_table.rx2('n')
        print(round(alpha[0], 3), items, n)
        list_alphac = {'Coeficiente Alpha Cronbach': [round(alpha[0], 5)],
                       'N de item': [items[0]],
                       'N de casos': [n[0]]}
        df_alphac = pd.DataFrame(list_alphac, columns=['Coeficiente Alpha Cronbach', 'N de item', 'N de casos'])
        print(df_alphac)
        # export df to html
        if 0.6 <= alpha[0] < 0.65:
            interpretation = 'Alpha Cronbach se considera indeseable, se recomienda revisar instrumento.'
        elif 0.65 <= alpha[0] < 0.7:
            interpretation = 'Alpha Cronbach es minimamente aceptable. No es suficiente para tomar decisiones y menos' \
                             ' aun las que influyan en el futuro de las personas como por ejemplo Test de Admisión'
        elif 0.7 <= alpha[0] < 0.8:
            interpretation = 'Alpha Cronbach es suficientemente bueno para cualquier investigación. Deseable en la' \
                             ' mayoria de los casos (Ej: Test de habilidades)'
        elif 0.8 <= alpha[0] < 0.9:
            interpretation = 'Alpha Cronbach se considera muy buena.'
        elif 0.9 <= alpha[0]:
            interpretation = 'Alpha Cronbach es un nivel elevado de confiabilidad.'
        else:
            interpretation = 'Alpha Cronbach se considera inaceptable, se recomienda revisar instrumento.'
        buf.truncate(0)
        df_alphac.to_html(buf, index=False)
        text = buf.getvalue()
        test.write('<hr>' + '<br><h2>Test de Confiabilidad Alpha Cronbach<h2>' + text + '<br><h3>Interpretación:<h3>'
                   + interpretation )
        writer(table, 'filetempo')
        alpha_drop = pd.read_csv('filetempo')
        print(alpha_drop)
        buf.truncate(0)
        alpha_drop[['Unnamed: 0','alphaDrop']].to_html(buf, index=False)
        alpha_drop.rename(columns={'Unnamed: 0': 'Item'}, inplace=True)
        text = buf.getvalue()
        test.write('<br><h2>Alpha Cronbach eliminando Item<h2>' + text + '<hr>')
        messagebox.showinfo(message="Alpha Cronbach listo", title="Mensaje")
        open_web()
        return

    open_datatable()
    alpha_window = tk.Toplevel()
    ClassToplevel(alpha_window)
    alpha_window.geometry('500x280')
    alpha_window.title('Análisis')
    apply_button = tk.Button(alpha_window, text="Aplicar", command=function_alpha)
    tk.Label(alpha_window, text='Alpha Cronbach', font='Arial 11 bold').grid(row=0,
                                                                             column=1,
                                                                             columnspan=4)
    info_label = tk.Label(alpha_window, wraplength=270, justify=LEFT,
                          text='Permite calcular el Alpha Cronbach de su instrumento.'
                               ' (Para ver su resultado e interpretación debe'
                               ' "Guardar Reporte" en el menú Archivo).\n Selecciona las columnas de los item a '
                               'analizar los datos deben ser de tipo dicotómico, politómico o continuo. (El ingresar'
                               ' tablas con datos no aceptados arrojará error).')
    info_label.grid(row=1, column=1, columnspan=4, rowspan=3)
    apply_button.grid(row=6, column=8, sticky=W)
    apply_button.configure(state=DISABLED)
    checklist = scrolledtext.ScrolledText(alpha_window, height=10, width=20, cursor='arrow', background='white')
    checklist.grid(row=0, column=8, rowspan=4)
    vars = []
    for column in dataframe_table:
        var = tk.IntVar()
        vars.append([var, column])
        checkbutton = tk.Checkbutton(checklist, text=column, variable=var, command=disablebutton, background='white')
        checklist.window_create("end", window=checkbutton)
        checklist.insert("end", "\n")
    checklist.configure(state="disabled")
    alpha_window.mainloop()


# Splithalf RULON BROWN------------------------------------------------

def analysis_splithalf():
    def disablebutton():
        i = 0
        for row in range(len(vars)):
            if vars[row][0].get() == 1:
                i = i + 1
                if i >= 2:
                    apply_button.configure(state=NORMAL)
                else:
                    apply_button.configure(state='disabled')
        return

    def splithalf_function():
        column_selected = []
        for i in range(len(vars)):
            if vars[i][0].get() == 1:
                column_selected.append(vars[i][1])
        i = 0
        k1 = 0
        k2 = 0
        score = 0
        pair = 0
        impair = 0
        for column in column_selected:
            i = i + 1
            score = score + dataframe_table[column].apply(int)
            if i % 2 == 0:
                pair = pair + dataframe_table[column].apply(int)
                k1 = k1 + 1
            else:
                impair = impair + dataframe_table[column].apply(int)
                k2 = k2 + 1
        pair = pair.astype(float)
        impair = impair.astype(float)
        dif_halfsplit = pair - impair
        corr = pair.corr(impair, method='pearson')
        spearman = corr * (pow(corr ** 2 + 4 * (k1 * k2 / (i * i)) * (1 - corr ** 2), 0.5) - corr) / (
                2 * (k1 * k2 / (i ** 2)) * (1 - corr ** 2))
        print(spearman)
        rulon = 1 - (dif_halfsplit.var(ddof=0) / score.var(ddof=0))
        scale = {'Conf. Spearman-Brown': [spearman], 'Conf. Rulón': [rulon]}
        df_scale = pd.DataFrame(scale, columns=['Conf. Spearman-Brown', 'Conf. Rulón'])
        buf.truncate(0)
        df_scale.to_html(buf, index=False)
        text = buf.getvalue()
        test.write('<hr>' + '<br><h2>Método de dos partes<h2>' + text + '<hr>')
        messagebox.showinfo(message="Metodo de dos partes listo", title="Mensaje")
        open_web()
        return

    open_datatable()
    global vars
    window_splithalf = tk.Toplevel()
    ClassToplevel(window_splithalf)
    window_splithalf.geometry('500x250')
    window_splithalf.title('Análisis dos mitades')
    apply_button = tk.Button(window_splithalf, text="Aplicar", command=splithalf_function, state="disabled")
    info_label = tk.Label(window_splithalf, wraplength=270, justify=LEFT,
                          text='Permite calcular la fiabilidad del instrumento por método de dos mitades (La división '
                               'se hace por pares e impares).\n(Para ver su resultado debe guardar '
                               'reporte en el Menú Archivo)')

    tk.Label(window_splithalf, text='Análisis de dos mitades', font='Arial 11 bold').grid(row=0, column=1,
                                                                                          columnspan=4)
    info_label.grid(row=1, column=1, columnspan=4, rowspan=3)
    apply_button.grid(row=6, column=8, sticky=W)
    checklist = scrolledtext.ScrolledText(window_splithalf, height=10, width=20, cursor='arrow', background='white')
    checklist.grid(row=0, column=8, rowspan=4)
    vars = []
    for column in dataframe_table:
        var = tk.IntVar()
        vars.append([var, column])
        checkbutton = tk.Checkbutton(checklist, text=column, variable=var, command=disablebutton, background='white')
        checklist.window_create("end", window=checkbutton)
        checklist.insert("end", "\n")
    checklist.configure(state="disabled")
    window_splithalf.mainloop()


# Transformar Datos ---------------------------------------------------------------

def transform_data():
    def disablebutton():
        for row in range(len(vars)):
            if vars[row][0].get() == 1:
                print('activado', vars[row][0].get)
                check_column.configure(state=NORMAL)
                assign_but.configure(state=NORMAL)
                return
            else:
                print('desactivado')
                check_column.configure(state='disabled')
                assign_but.configure(state='disabled')
        return

    def cuali_replace():
        def apply_trans():
            print(array_valores)
            global app
            if var_replace.get() == 1:
                for row in range(len(array_valores)):
                    if array_valores[row][1].get():
                        dataframe_table[select_column] = dataframe_table[select_column].replace([array_valores[row][0]],
                                                                                                array_valores[row][
                                                                                                    1].get())
                    else:
                        dataframe_table[select_column] = dataframe_table[select_column].replace(array_valores[row][0],
                                                                                                array_valores[len(
                                                                                                    array_valores) - 1][
                                                                                                    1].get())
                print(dataframe_table[select_column])
                buffer = dataframe_table.to_dict('index')
                app = MyTable(frame, data=buffer)
                app.redrawTable()
            if var_replace.get() == 0:
                for row in range(len(array_valores)):
                    if array_valores[row][1].get():
                        dataframe_table[select_column] = dataframe_table[select_column].replace([array_valores[row][0]],
                                                                                                array_valores[row][
                                                                                                    1].get())
                    else:
                        dataframe_table[select_column] = dataframe_table[select_column].replace(array_valores[row][0],
                                                                                                array_valores[len(
                                                                                                    array_valores) - 1][
                                                                                                    1].get())
                temporal = dataframe_table[select_column].copy()
                print('temporal', temporal)
                open_datatable()
                for column in select_column:
                    for c in range(len(list(dataframe_table))):
                        if not 'copy_%d(%s)' % (c, column) in dataframe_table:
                            dataframe_table['copy_%d(%s)' % (c, column)] = temporal[column].values
                            break
                print(dataframe_table)
                buffer = dataframe_table.to_dict('index')
                app = MyTable(frame, data=buffer)
                app.redrawTable()
            tk.messagebox.showinfo(title='Transformar', message='Datos transformados')

        cuali_window = tk.Toplevel()
        ClassToplevel(cuali_window)
        input_window.title('Reemplazar valores')
        input_window.geometry('550x300')
        select_column = []
        for row in range(len(vars)):
            if vars[row][0].get() == 1:
                select_column.append(vars[row][1])
        unique_values = (pd.unique(dataframe_table[select_column].values.ravel())).tolist()
        print(unique_values)
        unique_values.sort()
        unique_values.append('else')
        array_valores = []
        i = 0
        for values in unique_values:
            variable_remplazada = StringVar()
            tk.Label(cuali_window, text=values).grid(row=i, column=0, columnspan=4, sticky=W)
            tk.Entry(cuali_window, textvariable=variable_remplazada).grid(row=i, column=5, columnspan=4, sticky=W)
            array_valores.append([values, variable_remplazada])
            i = i + 1
        button_apply = tk.Button(cuali_window, text="aplicar",
                                 command=lambda: apply_trans() if array_valores[len(array_valores) - 1][
                                     1].get() else tk.messagebox.showinfo(title='Información',
                                                                          message='Ingrese valor a else'))
        button_apply.grid()
        button_apply.configure(DISABLED)
        cuali_window.mainloop()
        return

    open_datatable()
    input_window = tk.Toplevel()
    ClassToplevel(input_window)
    input_window.title('Transformar Data')
    input_window.geometry('500x300')
    info_label = tk.Label(input_window, wraplength=270, justify=LEFT,
                          text='Permite transformar los datos de las columnas seleccionadas. Selecciona las columnas'
                               ' en el cuadro blanco y elige si deseas reemplazar las columnas originales por las '
                               'transformadas. Por defecto se agregará una nueva columna de nombre Copy"numero"'
                               '(nombre de la columna).')

    tk.Label(input_window, text='Transformar datos', font='Arial 11 bold').grid(row=0, column=1, columnspan=4)
    info_label.grid(row=1, column=1, columnspan=4, rowspan=3)
    var_replace = IntVar()
    checklist = scrolledtext.ScrolledText(input_window, height=10, width=20, cursor="arrow")
    checklist.grid(row=0, column=8, rowspan=4, columnspan=4, sticky=W)
    vars = []
    for column in dataframe_table:
        var = tk.IntVar()
        vars.append([var, column])
        checkbutton = tk.Checkbutton(checklist, text=column, variable=var, command=disablebutton, background='white')
        checklist.window_create("end", window=checkbutton)
        checklist.insert("end", "\n")
    check_column = tk.Checkbutton(input_window, text="Reemplazar columnas", variable=var_replace)
    check_column.grid(row=6, column=1, columnspan=4, sticky=W)
    check_column.configure(state="disabled")
    checklist.configure(state="disabled")
    assign_but = tk.Button(input_window, text="Asignar valores", command=cuali_replace)
    assign_but.grid(row=6, column=8, sticky=W)
    assign_but.configure(state="disabled")
    input_window.mainloop()
    return


# --------------------------------------------------------------------------------------------------
def about_chungungo():
    about_window = tk.Toplevel()
    ClassToplevel(about_window)
    about_window.overrideredirect(True)
    about_window.configure(bg='#ebe8e3')
    # Gets both half the screen width/height and window width/height
    positionright = int(about_window.winfo_screenwidth() / 2 - 400 / 2)
    positiondown = int(about_window.winfo_screenheight() / 2 - 250 / 2)
    about_window.geometry('400x250')
    about_window.geometry("+{}+{}".format(positionright, positiondown))
    img = PhotoImage(
        data='')
    tk.Label(about_window, bg='#ebe8e3', image=img).grid(row=0, column=0, columnspan=4, sticky=W)
    s = 'Chungungo es un programa que permite a profesores que diseñen instrumentos realizar' \
        ' analisis psicométrico desde una Hoja de calculo. Entregando información' \
        ' estadística, con su respectiva interpretación.'
    tk.Label(about_window, bg='#ebe8e3', text='Acerca de Chungungo', font='Arial 11 bold').grid(row=1, column=1)
    tk.Label(about_window, bg='#ebe8e3', text=f'Versión: {version}', font='Arial 9').grid(row=1, column=3)
    tk.Label(about_window, bg='#ebe8e3', text=s, font='Arial 9', justify=LEFT,
             wraplength=350).grid(row=2, column=0, columnspan=4, rowspan=3)
    tk.Button(about_window, bg='#ebe8e3', text="Aceptar", command=about_window.destroy).grid(row=6, column=3)
    about_window.mainloop()


# TKINTER Y TKINTERTABLE--------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------------

class MyTable(Table):
    """  Custom table class inherits from Table.This overrides the right click menu. """

    def __init__(self, parent=None, **kwargs):
        Table.__init__(self, parent, rows=30, cols=27, rowheight=20, **kwargs)
        self.cellbackgr = 'white'
        self.show()
        self.rows = self.model.getRowCount()
        self.cols = self.model.getColumnCount()
        return

    def copyCell(self, rows, cols=None):
        row = rows[0]
        col = cols[0]
        self.clipboard = copy.deepcopy(self.model.getCellRecord(row, col))
        return

    def cutCell(self, rows, cols=None):
        row = rows[0]
        col = cols[0]
        self.clipboard = copy.deepcopy(self.model.getCellRecord(row, col))
        self.model.setValueAt('', row, col)
        self.redrawTable()
        return

    def pasteCell(self, rows, cols=None):
        row = rows[0]
        col = cols[0]
        val = self.clipboard
        self.model.setValueAt(val, row, col)
        self.redrawTable()
        return

    def findValue(self, searchstring=None, findagain=None):
        if searchstring == None:
            searchstring = simpledialog.askstring("Search table.",
                                                  "Enter search value",
                                                  parent=self.parentframe)
        found = 0
        if findagain == None or not hasattr(self, 'foundlist'):
            self.foundlist = []
        if self.model != None:
            for row in range(self.rows):
                for col in range(self.cols):
                    text = str(self.model.getValueAt(row, col))
                    if text == '' or text == None:
                        continue
                    cell = row, col
                    if findagain == 1 and cell in self.foundlist:
                        continue
                    if text.lower().find(searchstring.lower()) != -1:
                        print('found in', row, col)
                        found = 1
                        # highlight cell
                        self.delete('searchrect')
                        self.drawRect(row, col, color='red', tag='searchrect', delete=0)
                        self.lift('searchrect')
                        self.lift('celltext' + str(col) + '_' + str(row))
                        # add row/col to foundlist
                        self.foundlist.append(cell)
                        # need to scroll to centre the cell here..
                        x, y = self.getCanvasPos(row, col)
                        self.xview('moveto', x)
                        self.yview('moveto', y)
                        self.tablecolheader.xview('moveto', x)
                        self.tablerowheader.yview('moveto', y)
                        return row, col
        if found == 0:
            self.delete('searchrect')
            print('nothing found')
            return None

    def popupMenu(self, event, rows=None, cols=None, outside=None):
        popupmenu = Menu(self, tearoff=0)
        popupmenu.add_command(label="Cortar", command=lambda: self.cutCell(rows, cols))
        popupmenu.add_command(label="Copiar", command=lambda: self.copyCell(rows, cols))
        popupmenu.add_command(label="Pegar", command=lambda: self.pasteCell(rows, cols))
        popupmenu.add_command(label="Buscar", command=lambda: self.findValue())

        def popupFocusOut(event):
            popupmenu.unpost()

        popupmenu.bind("<FocusOut>", popupFocusOut)
        popupmenu.focus_set()
        popupmenu.post(event.x_root, event.y_root)
        return popupmenu


# override close chungungo--------------------------------------------------------------------------

def closechungungo():
    msg_box1 = tk.messagebox.askquestion(title='Salir', message='Cerrara la ventana de la aplicación '
                                                                '¿Desea continuar?', icon='warning')
    if msg_box1 == 'yes':
        msg_box2 = tk.messagebox.askquestion(title='Guardar', message='Al cerrar la ventana perderá los Datos '
                                                                      '¿Desea guardar reporte antes de salir?',
                                             icon='question')
        if msg_box2 == 'yes':
            save_html()
        print('bye')
        root.destroy()
    return


# ---------------------------------------------------------


class ClassToplevel:
    def __init__(self, master):
        self.master = master
        self.master.resizable(0, 0)
        self.master.grid_columnconfigure(0, weight=1)
        self.master.grid_columnconfigure(5, weight=1)
        self.master.grid_rowconfigure(5, weight=1)
        self.master.grid_rowconfigure(7, weight=1)
        self.master.focus()
        self.master.grab_set()

# ----------------------------------------------------------------------------------------------------------------
# creating tkinter window and define property--------------------------------------------------------------------
destroy_splash()
root = tk.Tk()
root.iconphoto(False, tk.PhotoImage(
    data='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'))
frame = Frame(root)
root.geometry('700x400+200+100')
root.rowconfigure(0, weight=1)
root.columnconfigure(0, weight=1)
frame.grid(sticky=tk.N + tk.S + tk.E + tk.W)
root.title('Chungungo')
# var
path_answers = tk.StringVar()
# Reemplacing Close window
root.protocol('WM_DELETE_WINDOW', closechungungo)  # root is your root window
# Creating Menubar
menubar = Menu(root)
# Adding File Menu and commands
file = Menu(menubar, tearoff=0)
menubar.add_cascade(label='Archivo', menu=file)
file.add_command(label='Abrir...', command=open_file)
file.add_command(label='Guardar Excel', command=save_excel)
file.add_command(label='Guardar Reporte', command=save_html)
file.add_separator()
file.add_command(label='Salir de Chungungo', command=closechungungo)

# Adding Edit Menu and commands 
# edit = Menu(menubar, tearoff = 0)
# menubar.add_cascade(label ='Edit', menu = edit)
# edit.add_command(label ='Cut', command = self.copyCell(rows,cols))
# edit.add_command(label ='Copy', command = self.copyCell(rows,cols))
# edit.add_command(label ='Paste', command = self.pasteCell(rows,cols))
# edit.add_command(label ='Select All', command = None)
# edit.add_separator()
# edit.add_command(label ='Find...', command = None)
# edit.add_command(label ='Find again', command = None)

# Adding analysis Menu and commands 
analysis = Menu(menubar, tearoff=0)
menubar.add_cascade(label='Análisis', menu=analysis)
analysis.add_command(label='Dificultad y Discriminación', command=dificultad_tct)
analysis.add_command(label='Test de Fiabilidad', command=alpha_cronbach)
analysis.add_command(label='Metodo de dos partes', command=analysis_splithalf)
analysis.add_command(label='IRT-RASCH..', command=irt_rasch)
analysis.add_command(label='Transformar Datos', command=transform_data)

# Adding Help Menu 
help_ = Menu(menubar, tearoff=0)
menubar.add_cascade(label='Ayuda', menu=help_)
help_.add_command(label='Chuchungo Ayuda', command=None)
help_.add_separator()
help_.add_command(label='Acerca de...', command=about_chungungo)

# display Menu 
root.config(menu=menubar)

# menubar.entryconfig("Edit", state= menudisabled)
menubar.entryconfig("Análisis", state=menudisabled)

# -----------------------------------------------------------------------------------------------------------------
# Widget Table
root.lift()
root.attributes('-topmost', True)
root.after_idle(root.attributes, '-topmost', False)
app = MyTable(frame)
root.mainloop()
